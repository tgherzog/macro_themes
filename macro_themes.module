<?php

/**
 * Implementation of hook_init().
 */
function macro_themes_init() {

  /* Check global theme settings to see if we should include our css. Setting this on a theme-specific
     basis is not possible, since at this point the theme may not be set.
  */
  $include_css = 1;
  if( ($settings = variable_get('theme_settings', array())) && isset($settings['macro_themes_include_css']) ) {
    $include_css = $settings['macro_themes_include_css'];
  }

  if( $include_css ) {
	drupal_add_css(drupal_get_path('module', 'macro_themes') . '/macro_themes.css');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function macro_themes_form_system_theme_settings_alter(&$form, $form_state) {

  include_once(drupal_get_path('module', 'macro_themes') . '/macro_themes.inc');
  _macro_themes_form_system_theme_settings_alter($form);
}

function macro_themes_theme() {

  return array(
    'macro_image' => array(
	  'arguments' => array('image' => null, 'params' => '', 'caption' => ''),
	  'file' => 'macro_themes.inc',
	),
	'macro_youtube' => array(
	  'arguments' => array('key' => 'UrOGXMDVVt4', 'params' => ''),
	  'template' => 'macro.youtube',
	),
	'macro_flickr' => array(
	  'arguments' => array('url' => '', 'params' => ''),
	  'template' => 'macro.flickr',
	),
	'macro_slideshare' => array(
	  'arguments' => array('key' => '', 'params' => ''),
	  'template' => 'macro.slideshare',
	),
	'macro_vimeo' => array(
	  'arguments' => array('key' => '', 'params' => ''),
	  'template' => 'macro.vimeo',
	),
  );
}

/* macro_themes_setting: get a default setting, similar to theme_get_setting
   
   Note that macro_themes options are stored in the theme_settings variable, and
   depends on the behavior of system_theme_settings to store variables in the theme_settings
   array (or theme_theme_name_settings).

   $macro_name: name of macro you need settings for:  youtube, flickr, etc. Pass null to get raw settings
*/

function macro_themes_settings($macro_name) {
  static $settings, $values=array();

  if( $macro_name && $values[$macro_name] ) {
    return $values;
  }

  if( empty($settings) ) {
	$settings = macro_themes_default_settings($theme_key);
  }

  if( ! $macro_name ) {
    return $settings;
  }

  $key = 'macro_themes_' . $macro_name . '_';
  foreach($settings as $name => $value) {
	if( substr($name,0,strlen($key)) == $key ) {
	  $param = substr($name,strlen($key));
	  $default[$param] = $value;
	}
  }

  $values[$macro_name] = $default;
  return $default;
}

function macro_themes_default_settings($key) {
  $defaults = array(
	'macro_themes_include_css' => 1, /* Note: this is only recognized and stored at the global level */

	'macro_themes_flickr_width' => 400,

	'macro_themes_vimeo_width' => 500,

	'macro_themes_slideshare_width' => 500,

	'macro_themes_image_max_width' => 500,
	'macro_themes_image_framed' => 'yes',
	'macro_themes_image_align' => 'none',
	'macro_themes_image_imagecache' => '',

	'macro_themes_youtube_width_normal' => 425,
	'macro_themes_youtube_width_wide' => 480,
	'macro_themes_youtube_ratio' => 'normal',
  );

  return array_merge($defaults, theme_get_settings($key));
}

function macro_themes_filter($op, $delta=0, $format=-1, $text='', $cache_id=0) {

  switch($op) {
    case 'list':
	  return array(0 => t('Macro Themes'));

    case 'description':
	  return t('Add text macros for many common multimedia content types.');

	case 'settings':
	  $form['filter_macro_themes'] = array(
	    '#type' => 'fieldset',
		'#title' => t('Macro Themes'),
		'#description' => t('Select the macro replacements you wish to enable.'),
		'#collapsible' => TRUE,
	  );

	  foreach(array('image', 'flickr', 'youtube', 'vimeo', 'slideshare') as $key) {
	    $form['filter_macro_themes']["macro_themes_filter_{$key}_$format"] = array(
		  '#type' => 'checkbox',
		  '#title' => "[$key]",
		  '#default_value' => variable_get("macro_themes_filter_{$key}_$format", 1),
		);
	  }
	  return $form;

	case 'process':
	  return _macro_themes_markup($text, $format);
    default:
	  return $text;
  }
}

function macro_themes_params($str, $args = array(), $params = array()) {

  foreach($args as $key => $pattern) {
    if( preg_match("/\b$key=($pattern)\b/i", $str, $_matches) ) {
      $params[strtolower($key)] = $_matches[1];
    }
  }

  return $params;
}

function _macro_themes_id_safe($string) {
  if (is_numeric($string{0})) {
    // if the first character is numeric, add 'n' in front
    $string = 'n'. $string;
  }
  return strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $string));
}

function _macro_themes_markup($text, $format) {
 
  $tpl = array(
    'image' => '#(<p>)?\[image\s+([^\]\s]+)\s*((\w+=[\w\-]+\s*)*)([^\]]*)\](</p>)?#i',
	'youtube' => '#(<p>)?\[youtube\s+(http://www.youtube.com/watch\?v=)?([\w\-]+)\s*([^\]]*)?\](</p>)?#i',
	'vimeo' => '#(<p>)?\[vimeo\s+(http://(www.)?vimeo.com/)?([\w\-]+)\s*([^\]]*)?\](</p>)?#i',
	'flickr' => '#(<p>)?\[flickr\s+http://(www\.)?flickr\.com(/[^\]\s]+)\s*([^\]]*)?\](</p>)?#i',
	'slideshare' => '#(<p>)?\[slideshare\s+id=(\w+).+?doc=([\w\-]+)\s*([^\]]*)?\](</p>)?#i',
  );

  foreach($tpl as $key => $regex) {
    if( variable_get("macro_themes_filter_{$key}_$format", 1) ) {
	  $text = preg_replace_callback($regex, "_macro_themes_markup_callback_{$key}", $text);
	}
  }

  return $text;
}

function _macro_themes_markup_callback_image($matches) {
  return theme('macro_image', $matches[2], $matches[3], $matches[5]);
}

function _macro_themes_markup_callback_youtube($matches) {
  return theme('macro_youtube', $matches[3], $matches[4]);
}

function _macro_themes_markup_callback_vimeo($matches) {
  return theme('macro_vimeo', $matches[4], $matches[5]);
}

function _macro_themes_markup_callback_flickr($matches) {
  return theme('macro_flickr', $matches[3], $matches[4]);
}

function _macro_themes_markup_callback_slideshare($matches) {
  return theme('macro_slideshare', $matches[3], $matches[4]);
}
